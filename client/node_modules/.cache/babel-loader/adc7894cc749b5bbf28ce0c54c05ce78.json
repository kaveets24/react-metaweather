{"ast":null,"code":"var _jsxFileName = \"/Users/steven/Documents/Code/Interviews/Go Nimbly/go-nimbly/client/src/components/Weather/index.js\";\nimport React from \"react\"; // css\n\nimport \"./style.scss\";\n\nconst convertTemp = temp => {\n  return Math.round(temp * (9 / 5) + 32);\n};\n\nconst Weather = props => {\n  let tableBody;\n  let weatherClassName = \"weather weather--hidden\";\n  let noResultsClassName = \"no-results no-results--hidden\";\n\n  if (props.weather && props.weather.length) {\n    weatherClassName = \"weather\";\n    noResultsClassName = \"no-results\";\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    let tableRows = props.weather.map(weather => {\n      // Return day as a string instead of an int.\n      let day = new Date(weather.applicable_date);\n      let dayString = days[day.getDay()];\n      let low = convertTemp(weather.min_temp);\n      let high = convertTemp(weather.max_temp);\n      let currentTemp = convertTemp(weather.the_temp);\n      return React.createElement(\"tr\", {\n        key: weather.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        alt: \"weather-icon\",\n        src: \"https://www.metaweather.com/static/img/weather/\".concat(weather.weather_state_abbr, \".svg\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      })), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, dayString), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, currentTemp), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, weather.weather_state_name), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, low), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, high), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, weather.humidity), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, Math.round(weather.wind_speed)));\n    });\n    tableBody = React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, tableRows);\n  }\n\n  let loadingClassName = props.weather && props.weather.loading ? \"loading\" : \" loading loading--hidden\";\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: loadingClassName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: weatherClassName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    style: {\n      opacity: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Icon\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"Day\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Temp (\\u2109)\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Condition\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"Low (\\u2109)\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"High (\\u2109)\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Humidity (%)\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Wind Speed (mph)\"))), tableBody)));\n};\n\nexport default Weather;","map":{"version":3,"sources":["/Users/steven/Documents/Code/Interviews/Go Nimbly/go-nimbly/client/src/components/Weather/index.js"],"names":["React","convertTemp","temp","Math","round","Weather","props","tableBody","weatherClassName","noResultsClassName","weather","length","days","tableRows","map","day","Date","applicable_date","dayString","getDay","low","min_temp","high","max_temp","currentTemp","the_temp","id","weather_state_abbr","weather_state_name","humidity","wind_speed","loadingClassName","loading","opacity"],"mappings":"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","sourcesContent":["import React from \"react\";\n// css\nimport \"./style.scss\";\n\nconst convertTemp = temp => {\n  return Math.round(temp * (9 / 5) + 32);\n};\n\nconst Weather = props => {\n  let tableBody;\n  let weatherClassName = \"weather weather--hidden\";\n  let noResultsClassName = \"no-results no-results--hidden\";\n\n  if (props.weather && props.weather.length) {\n    weatherClassName = \"weather\";\n    noResultsClassName = \"no-results\";\n\n    let days = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\"\n    ];\n    let tableRows = props.weather.map(weather => {\n      // Return day as a string instead of an int.\n      let day = new Date(weather.applicable_date);\n      let dayString = days[day.getDay()];\n      let low = convertTemp(weather.min_temp);\n      let high = convertTemp(weather.max_temp);\n      let currentTemp = convertTemp(weather.the_temp);\n\n      return (\n        <tr key={weather.id}>\n          <td><img alt=\"weather-icon\" src={`https://www.metaweather.com/static/img/weather/${weather.weather_state_abbr}.svg`}></img></td>\n          <td>{dayString}</td>\n          <td>{currentTemp}</td>\n          <td>{weather.weather_state_name}</td>\n          <td>{low}</td>\n          <td>{high}</td>\n          <td>{weather.humidity}</td>\n          <td>{Math.round(weather.wind_speed)}</td>\n        </tr>\n      );\n    });\n\n    tableBody = <tbody>{tableRows}</tbody>;\n  }\n  let loadingClassName = props.weather && props.weather.loading ? \"loading\" : \" loading loading--hidden\";\n\n  return (\n    <div>\n      <div className={loadingClassName}></div>\n      <div className={weatherClassName}>\n        <table>\n          <thead>\n            <tr>\n              <th style={{opacity: 0}}>Icon</th>\n              <th>Day</th>\n              <th>Temp (℉)</th>\n              <th>Condition</th>\n              <th>Low (℉)</th>\n              <th>High (℉)</th>\n              <th>Humidity (%)</th>\n              <th>Wind Speed (mph)</th>\n            </tr>\n          </thead>\n          {tableBody}\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}