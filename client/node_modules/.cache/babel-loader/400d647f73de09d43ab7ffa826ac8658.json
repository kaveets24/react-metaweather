{"ast":null,"code":"var _jsxFileName = \"/Users/steven/Documents/Code/Interviews/Go Nimbly/go-nimbly/client/src/components/Table/index.js\";\nimport React from \"react\";\n\nconst Table = props => {\n  let location = props.location ? props.location : \"\";\n  let tableBody;\n\n  if (props.weather && props.weather.length) {\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    let tableRows = props.weather.map(weather => {\n      // Return day as a String instead of a numerical representation.\n      let day = days[new Date(weather.applicable_date).getDay()];\n      return React.createElement(\"tr\", {\n        key: weather.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, weather.weather_state_name), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, day));\n    });\n    tableBody = React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, tableRows);\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, location), React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Condition\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"Day\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"Humidity\"))), tableBody));\n};\n\nexport default Table;","map":{"version":3,"sources":["/Users/steven/Documents/Code/Interviews/Go Nimbly/go-nimbly/client/src/components/Table/index.js"],"names":["React","Table","props","location","tableBody","weather","length","days","tableRows","map","day","Date","applicable_date","getDay","id","weather_state_name"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,KAAK,GAAGC,KAAK,IAAI;AACrB,MAAIC,QAAQ,GAAGD,KAAK,CAACC,QAAN,GAAiBD,KAAK,CAACC,QAAvB,GAAkC,EAAjD;AACA,MAAIC,SAAJ;;AACA,MAAIF,KAAK,CAACG,OAAN,IAAiBH,KAAK,CAACG,OAAN,CAAcC,MAAnC,EAA2C;AACzC,QAAIC,IAAI,GAAG,CACT,QADS,EAET,QAFS,EAGT,SAHS,EAIT,WAJS,EAKT,UALS,EAMT,QANS,EAOT,UAPS,CAAX;AASA,QAAIC,SAAS,GAAGN,KAAK,CAACG,OAAN,CAAcI,GAAd,CAAkBJ,OAAO,IAAI;AAC3C;AACA,UAAIK,GAAG,GAAGH,IAAI,CAAC,IAAII,IAAJ,CAASN,OAAO,CAACO,eAAjB,EAAkCC,MAAlC,EAAD,CAAd;AACA,aACE;AAAI,QAAA,GAAG,EAAER,OAAO,CAACS,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKT,OAAO,CAACU,kBAAb,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKL,GAAL,CAFF,CADF;AAMD,KATe,CAAhB;AAWAN,IAAAA,SAAS,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAQI,SAAR,CAAZ;AACD;;AAED,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAML,QAAN,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,CADF,CADF,EAQGC,SARH,CAFF,CADF;AAeD,CA1CD;;AA4CA,eAAeH,KAAf","sourcesContent":["import React from \"react\";\n\nconst Table = props => {\n  let location = props.location ? props.location : \"\";\n  let tableBody;\n  if (props.weather && props.weather.length) {\n    let days = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\"\n    ];\n    let tableRows = props.weather.map(weather => {\n      // Return day as a String instead of a numerical representation.\n      let day = days[new Date(weather.applicable_date).getDay()];\n      return (\n        <tr key={weather.id}>\n          <td>{weather.weather_state_name}</td>\n          <td>{day}</td>\n        </tr>\n      );\n    });\n\n    tableBody = <tbody>{tableRows}</tbody>;\n  }\n\n  return (\n    <div>\n      <div>{location}</div>\n      <table>\n        <thead>\n          <tr>\n            <th>Condition</th>\n            <th>Day</th>\n            <th>Humidity</th>\n          </tr>\n        </thead>\n        {tableBody}\n      </table>\n    </div>\n  );\n};\n\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}